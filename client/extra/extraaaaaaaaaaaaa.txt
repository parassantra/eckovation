import React, { Component } from 'react';
import Editor from './Editor';
class Body extends Component
{
    constructor(props)
    {
        super();
        this.state = {
            html : "<h1>ALPHA</h1> <hr />",
            script : "",
            style : "body {  background-color: black; color : white;}" ,
        };
    }
    componentDidMount()
    {
        if( this.props.match.params.id )
            this.loadCode();
    }
    render()
    {
        return (
            <div className="row no-gutters" >
                <div className="col-lg-4 order-1 col-md-12 border-right" id="col4" >
                    <Editor 
                        html={this.state.html}        hevent={this.changeHTML.bind(this)}
                        css={this.state.style}        cevent={this.changeCSS.bind(this)}
                        js={this.state.script}        jevent={this.changeJS.bind(this)}
                    />
                </div>
                <div className="col-lg-8 order-2 col-md-12" id="col8">
                    <iframe id="output" title="output">     </iframe>
                </div>
            </div>
        );
    }


    changeHTML(Val) { 
        this.setState({ html : Val});
        this.renderOutput();
    }
    changeCSS(Val) { 
        this.setState({ style : Val});
        this.renderOutput();
    }
    changeJS(Val) { 
        this.setState({ script : Val});
        this.renderOutput();
    }    
    renderOutput = () => {
        var x = document.getElementById("output"); 
        var y = (x.contentWindow || x.contentDocument);
            y.close();
        if (y.document)y = y.document;
            y.close(); 
        const result = " <style> " + this.state.style +" </style> <script>" + this.state.script + " </script> " + this.state.html;
        y.write(result);
    }

    loadCode = () => {
        this.callApi()
            // .then(res => { this.script = res.JS; this.html = res.html; this.style = res.CSS;} )
            .then(res => { this.html = res.html} )
            .catch(err => console.log(err));
    };
    callApi = async () => {
        const a = "/url/" + this.props.match.params.id;
        const response = await fetch(a);
        const body = await response.json();
        if (response.status !== 200) throw Error(body.message);
        return body;
    };
}
export default Body;